//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IBC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Broxel_SociedadesCreditoEntities : DbContext
    {
        public Broxel_SociedadesCreditoEntities()
            : base("name=Broxel_SociedadesCreditoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CaracteristicasBC> CaracteristicasBC { get; set; }
        public virtual DbSet<catConsultasEmpresa> catConsultasEmpresa { get; set; }
        public virtual DbSet<catEncabezadoXEmpresa> catEncabezadoXEmpresa { get; set; }
        public virtual DbSet<ConsultaBC> ConsultaBC { get; set; }
        public virtual DbSet<ConsultaEfectuadaRespBC> ConsultaEfectuadaRespBC { get; set; }
        public virtual DbSet<CuentaBCResp> CuentaBCResp { get; set; }
        public virtual DbSet<DireccionBCResp> DireccionBCResp { get; set; }
        public virtual DbSet<EmpleoBCResp> EmpleoBCResp { get; set; }
        public virtual DbSet<EncabezadoBCResp> EncabezadoBCResp { get; set; }
        public virtual DbSet<ErrorRespBC> ErrorRespBC { get; set; }
        public virtual DbSet<MensajeBCResp> MensajeBCResp { get; set; }
        public virtual DbSet<PersonaRespBC> PersonaRespBC { get; set; }
        public virtual DbSet<ScoreBuroCreditoRespBC> ScoreBuroCreditoRespBC { get; set; }
        public virtual DbSet<CPSepomex> CPSepomex { get; set; }
        public virtual DbSet<DomicilioBCRequest> DomicilioBCRequest { get; set; }
        public virtual DbSet<NombreBCResp> NombreBCResp { get; set; }
        public virtual DbSet<ResumenReporteResp> ResumenReporteResp { get; set; }
        public virtual DbSet<DeclaracionesClienteRespBC> DeclaracionesClienteRespBC { get; set; }
        public virtual DbSet<CatParametros> CatParametros { get; set; }
        public virtual DbSet<LogErrorConsultaBC> LogErrorConsultaBC { get; set; }
        public virtual DbSet<HawkAlertBDRespBC> HawkAlertBDRespBC { get; set; }
        public virtual DbSet<HawkAlertConsultaRespBC> HawkAlertConsultaRespBC { get; set; }
        public virtual DbSet<ARBC> ARBC { get; set; }
        public virtual DbSet<URBC> URBC { get; set; }
    
        public virtual int spInsConsultaBC(string aPaterno, string aMaterno, string pNombre, string sNombre, string rfc, ObjectParameter idConsultaBC)
        {
            var aPaternoParameter = aPaterno != null ?
                new ObjectParameter("APaterno", aPaterno) :
                new ObjectParameter("APaterno", typeof(string));
    
            var aMaternoParameter = aMaterno != null ?
                new ObjectParameter("AMaterno", aMaterno) :
                new ObjectParameter("AMaterno", typeof(string));
    
            var pNombreParameter = pNombre != null ?
                new ObjectParameter("PNombre", pNombre) :
                new ObjectParameter("PNombre", typeof(string));
    
            var sNombreParameter = sNombre != null ?
                new ObjectParameter("SNombre", sNombre) :
                new ObjectParameter("SNombre", typeof(string));
    
            var rfcParameter = rfc != null ?
                new ObjectParameter("Rfc", rfc) :
                new ObjectParameter("Rfc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsConsultaBC", aPaternoParameter, aMaternoParameter, pNombreParameter, sNombreParameter, rfcParameter, idConsultaBC);
        }
    
        public virtual int spInsPersonaRespBC(Nullable<int> pIdConsultaBC, string pReporteImpreso, ObjectParameter pIdPersonaRespBC)
        {
            var pIdConsultaBCParameter = pIdConsultaBC.HasValue ?
                new ObjectParameter("pIdConsultaBC", pIdConsultaBC) :
                new ObjectParameter("pIdConsultaBC", typeof(int));
    
            var pReporteImpresoParameter = pReporteImpreso != null ?
                new ObjectParameter("pReporteImpreso", pReporteImpreso) :
                new ObjectParameter("pReporteImpreso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsPersonaRespBC", pIdConsultaBCParameter, pReporteImpresoParameter, pIdPersonaRespBC);
        }
    
        public virtual int spInsErrorRespBC(Nullable<int> idPersonaRespBC, ObjectParameter idErrorRespBC)
        {
            var idPersonaRespBCParameter = idPersonaRespBC.HasValue ?
                new ObjectParameter("idPersonaRespBC", idPersonaRespBC) :
                new ObjectParameter("idPersonaRespBC", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsErrorRespBC", idPersonaRespBCParameter, idErrorRespBC);
        }
    
        public virtual ObjectResult<spCheckBuroHistoric_Result> spCheckBuroHistoric(string aPaterno, string aMaterno, string pNombre, string sNombre, string rFC, string calle, string numeroExt, string numeroInt, string colonia, string delegacion, string estado, string cp)
        {
            var aPaternoParameter = aPaterno != null ?
                new ObjectParameter("APaterno", aPaterno) :
                new ObjectParameter("APaterno", typeof(string));
    
            var aMaternoParameter = aMaterno != null ?
                new ObjectParameter("AMaterno", aMaterno) :
                new ObjectParameter("AMaterno", typeof(string));
    
            var pNombreParameter = pNombre != null ?
                new ObjectParameter("PNombre", pNombre) :
                new ObjectParameter("PNombre", typeof(string));
    
            var sNombreParameter = sNombre != null ?
                new ObjectParameter("SNombre", sNombre) :
                new ObjectParameter("SNombre", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var numeroExtParameter = numeroExt != null ?
                new ObjectParameter("numeroExt", numeroExt) :
                new ObjectParameter("numeroExt", typeof(string));
    
            var numeroIntParameter = numeroInt != null ?
                new ObjectParameter("numeroInt", numeroInt) :
                new ObjectParameter("numeroInt", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("colonia", colonia) :
                new ObjectParameter("colonia", typeof(string));
    
            var delegacionParameter = delegacion != null ?
                new ObjectParameter("delegacion", delegacion) :
                new ObjectParameter("delegacion", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var cpParameter = cp != null ?
                new ObjectParameter("cp", cp) :
                new ObjectParameter("cp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckBuroHistoric_Result>("spCheckBuroHistoric", aPaternoParameter, aMaternoParameter, pNombreParameter, sNombreParameter, rFCParameter, calleParameter, numeroExtParameter, numeroIntParameter, coloniaParameter, delegacionParameter, estadoParameter, cpParameter);
        }
    }
}
